Алгоритмите треба да бидат коректни, ефикасни и лесни за имплементација. Коректноста на алгоритмите треба да се докаже (со неможност да се најде валиден влезен податок за кој алгоритмот не работи правилно, со потврда дека спротивниот алгоритам дава грешни резултати, со математичка индукција). Важно е да се разбере дека изказот “решението е очигледно“ најчесто води во заблуда и креирање на грешни алгоритми. Не постои алгоритам за наоѓање на алгоритми. Смислувањето на алгоритам е обично многу потешко од пишување на програм (за познат алгоритам). Искусен дизајнер на алгоритми е всушност експерт за ефикасност на алгоритмите. Ефикасни се оние коректни алгоритми кои за дадени влезни податоци завршуваат побрзо од други коректни алгоритми кои работат со истите влезни податоци. При тоа треба се напомене дека наоѓањето на најефикасен алгоритам не е секогаш од пресудно значење. Имено статистички гледано само 20% од кодот на даден програм се извршува 80% од времето додека тој програм е стартуван. Од тука следи дека на вкупната ефикасност на програмот значително влиае само 20% од кодот, па доволно е само тој да се оптимизира. Иако брзината на извршување на некој алгоритам реално зависи од хардверот над кој тој се извршува, па забрзување на алгоритмот може да се постигне со негово извршување на побрз хардвер, тоа може да биде лимитирано со технички ограничувања (не постоење на побрз хардвер). Од предходното следи, дека за да се подобрат перформансите на алгоритмот мора да се напише подобар алгоритам. За да се споредат алгоритмите потребно е да се користи модел на извршување кој не зависи од хардверот. Вообичаено се препоставува дека алгоритмите се извршуваат на хипотетички компјутер наречен “Random Access Machine“ или RAM. Превземено од https://mk.wikipedia.org/wiki/%D0%90%D0%BB%D0%B3%D0%BE%D1%80%D0%B8%D1%82%D0%B0%D0%BC.
